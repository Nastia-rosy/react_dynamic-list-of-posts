{"version":3,"sources":["api/api.ts","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","getPosts","a","Promise","all","postsFromServer","usersFromServer","commentsFromServer","map","post","user","find","id","userId","comments","filter","comment","postId","User","className","name","email","address","street","suite","city","zipcode","Comment","body","CommentList","key","Post","title","PostList","posts","useState","query","setQuery","filterQuery","setfilterQuery","vissiblePosts","useMemo","allPosts","searchQuery","pattern","RegExp","test","getVisiblePosts","setfilterQueryWithDebonce","useCallback","debounce","htmlFor","type","placeholder","value","onChange","event","target","App","setPosts","isLoading","setIsLoading","errorMessage","setErrorMesage","preparedPosts","length","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d8b4dd3.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\ninterface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n}\n\nexport interface Users {\n  id: number;\n  name: string;\n  email: string;\n  address: Address;\n}\n\nexport interface Comments {\n  postId: number;\n  id: number;\n  name: string;\n  body: string;\n  email: string;\n}\n\nexport interface Posts {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface PostWithUser {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user: Users;\n  comments: Comments[];\n}\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n\nexport const posts = () => getAll<Posts>('/posts.json');\n\nexport const users = () => getAll<Users>('/users.json');\n\nexport const comments = () => getAll<Comments>('/comments.json');\n\nexport const getPosts = async (): Promise<PostWithUser[]> => {\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([posts(), users(), comments()]);\n\n  return postsFromServer.map((post) => ({\n    ...post,\n    user: usersFromServer.find((user) => user.id === post.userId) as Users,\n    comments: commentsFromServer.filter((comment) => comment.postId === post.id),\n\n}));\n};\n\n\n","import React from 'react';\nimport { Users } from '../api/api';\n\ntype Props = {\n  user: Users;\n}\n\nconst User: React.FC<Props> = ({ user }) => (\n  <div className=\"posts__user user\">\n    <div className=\"user__name\">\n      <p>\n        {user.name}\n      </p>\n      <p>\n        {user.email}\n      </p>\n    </div>\n    <div className=\"user__adress\">\n      <p>\n        Street: &nbsp;\n        {user.address.street}\n      </p>\n      <p>\n        Suite: &nbsp;\n        {user.address.suite}\n      </p>\n      <p>\n        City: &nbsp;\n        {user.address.city}\n      </p>\n      <p>\n        Zipcode: &nbsp;\n        {user.address.zipcode}\n      </p>\n    </div>\n  </div>\n);\n\nexport default User;\n","import React from 'react';\nimport { Comments } from '../api/api';\n\ntype Props = {\n  comment: Comments;\n}\n\nconst Comment: React.FC<Props> = ({ comment }) => (\n  <li>\n    <hr />\n    <h4 className=\"comments__name\">{comment.name}</h4>\n    <p className=\"comments__text\">{comment.body}</p>\n    <p className=\"comments__email\">{comment.email}</p>\n  </li>\n);\n\nexport default Comment;\n","import React from 'react';\nimport { Comments } from '../api/api';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comments[];\n}\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <ul className=\"posts__comments comments\">\n    <hr />\n    <h3>Comments:</h3>\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    ))}\n  </ul>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport { PostWithUser } from '../api/api';\nimport User from './User';\nimport CommentList from './CommentList';\n\ntype Props = {\n  post: PostWithUser;\n}\n\nconst Post: React.FC<Props> = ({ post }) => (\n  <li className=\"posts__item\">\n    <div>\n      <h3 className=\"posts__title\">{post.title}</h3>\n      <p className=\"posts__text\">\n        {post.body}\n      </p>\n    </div>\n    <User user={post.user} />\n    <CommentList comments={post.comments} />\n  </li>\n);\n\nexport default Post;\n","import React, { useCallback, useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { PostWithUser } from '../api/api';\nimport Post from './Post';\n\ntype Props = {\n  posts: PostWithUser[];\n}\n\nconst PostList: React.FC<Props> = ({ posts }) => {\n  const [query, setQuery] = useState('');\n  const [filterQuery, setfilterQuery] = useState('');\n\n\n  const getVisiblePosts = (allPosts: PostWithUser[], searchQuery: string) => {\n    const pattern = new RegExp(searchQuery, 'i');\n\n    return allPosts.filter(({ body, title }) => pattern.test(body + title))\n  }\n\n  const vissiblePosts = useMemo(\n    () => getVisiblePosts(posts, filterQuery),\n\n    [filterQuery]\n  );\n\n  const setfilterQueryWithDebonce = useCallback(\n    debounce(setfilterQuery, 1000),\n    []\n  );\n\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setfilterQueryWithDebonce(event.target.value)\n  }\n\n\n\n  return (\n    <>\n      <label htmlFor=\"filter\" className=\"filter__text\">\n        Filter posts:\n          </label>\n      <input\n        type=\"text\"\n        id=\"filter\"\n        className=\"filter__field\"\n        placeholder=\"enter word...\"\n        value={query}\n        onChange={handleChange}\n      />\n\n      <ul className=\"posts\">\n        {vissiblePosts.map(post => (\n          <Post post={post} key={post.id} />\n        ))}\n      </ul>\n    </>\n  )\n\n}\n\n\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getPosts } from './api/api';\nimport { PostWithUser } from './api/api';\n\nimport PostList from './components/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<PostWithUser[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMesage] = useState('');\n\n  async function handleLoadClick() {\n    setIsLoading(true);\n\n    try {\n      const preparedPosts = await getPosts();\n      setPosts(preparedPosts);\n    } catch (error) {\n      setErrorMesage('Loading error, please try again later')\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {posts.length === 0 ? (\n        <>\n          <button type=\"button\" onClick={handleLoadClick} disabled={isLoading}>\n            {isLoading ? 'Loading' : 'Load'}\n          </button>\n          {errorMessage && <span className=\"error\">{errorMessage}</span>}\n        </>\n\n      ) : (\n          <PostList posts={posts} />\n        )}\n    </div>\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}